// src/hooks/useWorkoutWithTimer.js
// üöÄ WA-009: Hook compos√© pour workout + timer automatique - VERSION CORRIG√âE
// R√©f√©rence Clean Code: "Compose methods to tell a story"

import { useWorkout } from './useWorkout.js';
import { useWorkoutTimer } from './useWorkoutTimer.js';

/**
 * üöÄ Hook compos√© useWorkoutWithAutoTimer - La solution compl√®te !
 * 
 * Ce hook combine useWorkout + useWorkoutTimer pour une exp√©rience compl√®te
 * avec timer automatique int√©gr√©.
 * 
 * @returns {Object} Interface compl√®te avec workout + timer
 */
export const useWorkoutWithAutoTimer = () => {
  // üéØ Hook workout de base
  const workout = useWorkout();
  
  // ‚è∞ Hook timer automatique
  const timer = useWorkoutTimer(workout);
  
  // üéµ Actions enrichies avec contr√¥le du timer
  const enhancedActions = {
    ...workout.actions,
    
    // üöÄ Start avec timer automatique
    startWorkout: () => {
      const result = workout.actions.startWorkout();
      if (result.success) {
        console.log('üöÄ Workout d√©marr√© - Timer automatique activ√©');
      }
      return result;
    },
    
    // ‚èπÔ∏è Stop avec arr√™t du timer
    stopWorkout: () => {
      console.log('‚èπÔ∏è Arr√™t du workout et du timer');
      timer.controls.stop();
      workout.actions.stopWorkout();
    },
    
    // üîÑ Reset complet
    resetWorkout: () => {
      console.log('üîÑ Reset du workout et du timer');
      timer.controls.reset();
      workout.actions.resetWorkout();
    }
  };
  
  // üéØ Interface publique enrichie
  return {
    // √âtat du workout
    state: workout.state,
    
    // Actions enrichies
    actions: enhancedActions,
    
    // Valeurs calcul√©es
    computed: workout.computed,
    
    // Capacit√©s UI
    capabilities: workout.capabilities,
    
    // Timer avec toutes ses fonctionnalit√©s
    timer,
    
    // Utilitaires combin√©s
    utils: {
      ...workout.utils,
      timerHealthCheck: () => {
        const health = timer.utils.isHealthy();
        console.log(`üè• Timer health check: ${health ? '‚úÖ OK' : '‚ùå Problem'}`);
        console.log(`   - Should run: ${workout.state.isActive && !workout.state.isPaused}`);
        console.log(`   - Is running: ${timer.isRunning}`);
        console.log(`   - Tick count: ${timer.tickCount}`);
        console.log(`   - Time remaining: ${workout.state.timeRemaining}s`);
        return health;
      }
    }
  };
};

export default useWorkoutWithAutoTimer;